{"version":3,"file":"useSuspenseInfiniteQuery.js","sources":["../../src/useSuspenseInfiniteQuery.ts"],"sourcesContent":["import { InfiniteQueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type {\n  InfiniteQueryObserverSuccessResult,\n  OmitKeyof,\n  QueryKey,\n  QueryObserver,\n  WithRequired,\n} from '@tanstack/query-core'\nimport type {\n  UseInfiniteQueryOptions,\n  UseSuspenseInfiniteQueryResult,\n} from './types'\n\nexport type UseSuspenseInfiniteQueryOptions<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = WithRequired<\n  OmitKeyof<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    | 'suspense'\n    | 'useErrorBoundary'\n    | 'enabled'\n    | 'placeholderData'\n    | 'networkMode'\n    | 'initialData'\n  >,\n  'queryKey'\n>\n\nexport function useSuspenseInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseSuspenseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey\n  >,\n): UseSuspenseInfiniteQueryResult<TData, TError> {\n  return useBaseQuery(\n    {\n      ...options,\n      enabled: true,\n      suspense: true,\n      useErrorBoundary: true,\n      networkMode: 'always',\n    },\n    InfiniteQueryObserver as typeof QueryObserver,\n  ) as InfiniteQueryObserverSuccessResult<TData, TError>\n}\n"],"names":["useSuspenseInfiniteQuery","options","useBaseQuery","enabled","suspense","useErrorBoundary","networkMode","InfiniteQueryObserver"],"mappings":";;;;;;;AAsCO,SAASA,wBAAT,CAMLC,OANK,EAY0C;AAC/C,EAAA,OAAOC,yBAAY,CACjB,EACE,GAAGD,OADL;AAEEE,IAAAA,OAAO,EAAE,IAFX;AAGEC,IAAAA,QAAQ,EAAE,IAHZ;AAIEC,IAAAA,gBAAgB,EAAE,IAJpB;AAKEC,IAAAA,WAAW,EAAE,QAAA;GANE,EAQjBC,+BARiB,CAAnB,CAAA;AAUD;;;;"}